version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: fantasy-football-db
    environment:
      POSTGRES_DB: fantasy_football
      POSTGRES_USER: peterlialios
      POSTGRES_PASSWORD: admin
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - fantasy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U peterlialios -d fantasy_football"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot API
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: fantasy-football-api
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/fantasy_football
      SPRING_DATASOURCE_USERNAME: peterlialios
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fantasy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Node.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fantasy-football-frontend
    environment:
      API_BASE_URL: http://api:8080/api
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - fantasy-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  fantasy-network:
    driver: bridge